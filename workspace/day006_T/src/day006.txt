오늘 실습할때
[1] 하위 20% >> 복습
[2] 실습을 하겠습니다!!! :D

§ 학생부 프로그램 with 함수 §
프로그램 만들어야징~~
설계 : LP ERD UF
LP → 사용자가 어떤 기능을 사용할지 == CRUD
				비즈니스 메서드
				핵심로직
				핵심관심
ERD → 프로그램에서 활용하는 데이터에 대한 모든 정의
	DB를 배우고 더 자세히 설명하겠습니다! :D
UF → 사용자가 어떤 순서로 프로그램을 이용하는지
	화면에 대한 모든 구성과 구성요소
C 학생추가
R 학생목록출력,학생1명검색
U 학생정보변경
D 학생삭제
프로그램 종료

int[] 학생 점수 데이터
최대 3명까지 저장 가능

1. 추가
2. 목록출력
3. 검색
4. 변경
5. 삭제
0. 종료

※ 유효성 검사
	사용자가 "입력"이라는 행위를 한다면, 무조건 잘못된 사용법으로 입력할수도있기때문에 검사해주어야만한다!!!!!
※ 기능 추가(or 변경)
	ex1) "1등 출력"이라는 기능 추가
	ex2) "목록출력" >> "50점이상 학생만 출력"으로 기능 변경


















★ 모듈화(컴포넌트화,캡슐화,리팩토링,패키징,함수화,메서드화,...)
모듈이란?
단독 수행할 수 있는 코드 묶음
독자적인 기능이 존재하는 코드

2번 레고가 더 좋은 레고!!!
 1. 조합 경우의 수 가 훨씬 많고,
 2. 더 세부적인 표현이 가능함!

§ 기존 프로그램은,
	전체 코드중에 단 한줄이라도 문제가 생기면
	동작이 불가능
	== 결합도가 높은 코드
	== 응집도가 낮은 코드
§ 오늘만들 프로그램은,
	각 기능들을 각각의 함수로 묶어서 별도로 관리할 예정
	함수 1개가 코드수정중이더라도 전체 프로그램은 사용가능
	== 결합도가 낮은 코드
	== 응집도가 높은 코드
§ 원래 존재하던 기능을 "함수화"시키는 것 == ★모듈화★





※ 함수를 먼저 작성해보자! ㅎㅎ
메서드 시그니쳐
함수 3요소
input / output / 기능
 => 1~4유형 중에 어떤 유형의 함수인지 선택!!!

학생배열에 학생이없을때에 사용자에게 안내멘트해주는 함수
input	index를 알아야되겠구나~~
output	void여도 될듯?
기능	안내멘트 출력

※ 함수를 먼저 작성하는 방식은 main()에서 활용되는것까지 고려해야하기때문에
	설계했던 input,output,기능에도 변화가 생길수있음!
		→ 지양




















